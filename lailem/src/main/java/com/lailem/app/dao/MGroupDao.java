package com.lailem.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MGROUPS".
*/
public class MGroupDao extends AbstractDao<MGroup, Long> {

    public static final String TABLENAME = "MGROUPS";

    /**
     * Properties of entity MGroup.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CreateTime = new Property(1, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property GroupId = new Property(2, String.class, "groupId", false, "GROUP_ID");
        public final static Property GroupType = new Property(3, String.class, "groupType", false, "GROUP_TYPE");
        public final static Property UserId = new Property(4, String.class, "userId", false, "USER_ID");
        public final static Property NewPublishCount = new Property(5, Integer.class, "newPublishCount", false, "NEW_PUBLISH_COUNT");
        public final static Property NewNoticeCount = new Property(6, Integer.class, "newNoticeCount", false, "NEW_NOTICE_COUNT");
        public final static Property NewApplyCount = new Property(7, Integer.class, "newApplyCount", false, "NEW_APPLY_COUNT");
        public final static Property TotalCount = new Property(8, Integer.class, "totalCount", false, "TOTAL_COUNT");
        public final static Property IsTop = new Property(9, String.class, "isTop", false, "IS_TOP");
        public final static Property TopTime = new Property(10, Long.class, "topTime", false, "TOP_TIME");
        public final static Property UpdateTime = new Property(11, Long.class, "updateTime", false, "UPDATE_TIME");
    };


    public MGroupDao(DaoConfig config) {
        super(config);
    }
    
    public MGroupDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MGROUPS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CREATE_TIME\" INTEGER," + // 1: createTime
                "\"GROUP_ID\" TEXT," + // 2: groupId
                "\"GROUP_TYPE\" TEXT," + // 3: groupType
                "\"USER_ID\" TEXT," + // 4: userId
                "\"NEW_PUBLISH_COUNT\" INTEGER," + // 5: newPublishCount
                "\"NEW_NOTICE_COUNT\" INTEGER," + // 6: newNoticeCount
                "\"NEW_APPLY_COUNT\" INTEGER," + // 7: newApplyCount
                "\"TOTAL_COUNT\" INTEGER," + // 8: totalCount
                "\"IS_TOP\" TEXT," + // 9: isTop
                "\"TOP_TIME\" INTEGER," + // 10: topTime
                "\"UPDATE_TIME\" INTEGER);"); // 11: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MGROUPS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MGroup entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(2, createTime);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(3, groupId);
        }
 
        String groupType = entity.getGroupType();
        if (groupType != null) {
            stmt.bindString(4, groupType);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(5, userId);
        }
 
        Integer newPublishCount = entity.getNewPublishCount();
        if (newPublishCount != null) {
            stmt.bindLong(6, newPublishCount);
        }
 
        Integer newNoticeCount = entity.getNewNoticeCount();
        if (newNoticeCount != null) {
            stmt.bindLong(7, newNoticeCount);
        }
 
        Integer newApplyCount = entity.getNewApplyCount();
        if (newApplyCount != null) {
            stmt.bindLong(8, newApplyCount);
        }
 
        Integer totalCount = entity.getTotalCount();
        if (totalCount != null) {
            stmt.bindLong(9, totalCount);
        }
 
        String isTop = entity.getIsTop();
        if (isTop != null) {
            stmt.bindString(10, isTop);
        }
 
        Long topTime = entity.getTopTime();
        if (topTime != null) {
            stmt.bindLong(11, topTime);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(12, updateTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MGroup readEntity(Cursor cursor, int offset) {
        MGroup entity = new MGroup( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // createTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // groupId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // groupType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userId
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // newPublishCount
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // newNoticeCount
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // newApplyCount
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // totalCount
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // isTop
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // topTime
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // updateTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MGroup entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreateTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setGroupId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroupType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNewPublishCount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setNewNoticeCount(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setNewApplyCount(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setTotalCount(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIsTop(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTopTime(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setUpdateTime(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MGroup entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MGroup entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
