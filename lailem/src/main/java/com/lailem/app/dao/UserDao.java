package com.lailem.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CreateTime = new Property(1, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME");
        public final static Property Head = new Property(4, String.class, "head", false, "HEAD");
        public final static Property UpdateTime = new Property(5, Long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property PersonalizedSignature = new Property(8, String.class, "personalizedSignature", false, "PERSONALIZED_SIGNATURE");
        public final static Property CountryCode = new Property(9, String.class, "countryCode", false, "COUNTRY_CODE");
        public final static Property UserType = new Property(10, String.class, "userType", false, "USER_TYPE");
        public final static Property Email = new Property(11, String.class, "email", false, "EMAIL");
        public final static Property HeadBig = new Property(12, String.class, "headBig", false, "HEAD_BIG");
        public final static Property LiveAreaId = new Property(13, String.class, "liveAreaId", false, "LIVE_AREA_ID");
        public final static Property Sex = new Property(14, String.class, "sex", false, "SEX");
        public final static Property Birthday = new Property(15, String.class, "birthday", false, "BIRTHDAY");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CREATE_TIME\" INTEGER," + // 1: createTime
                "\"USER_ID\" TEXT," + // 2: userId
                "\"NICKNAME\" TEXT," + // 3: nickname
                "\"HEAD\" TEXT," + // 4: head
                "\"UPDATE_TIME\" INTEGER," + // 5: updateTime
                "\"NAME\" TEXT," + // 6: name
                "\"PHONE\" TEXT," + // 7: phone
                "\"PERSONALIZED_SIGNATURE\" TEXT," + // 8: personalizedSignature
                "\"COUNTRY_CODE\" TEXT," + // 9: countryCode
                "\"USER_TYPE\" TEXT," + // 10: userType
                "\"EMAIL\" TEXT," + // 11: email
                "\"HEAD_BIG\" TEXT," + // 12: headBig
                "\"LIVE_AREA_ID\" TEXT," + // 13: liveAreaId
                "\"SEX\" TEXT," + // 14: sex
                "\"BIRTHDAY\" TEXT);"); // 15: birthday
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(2, createTime);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(5, head);
        }
 
        Long updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(6, updateTime);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        String personalizedSignature = entity.getPersonalizedSignature();
        if (personalizedSignature != null) {
            stmt.bindString(9, personalizedSignature);
        }
 
        String countryCode = entity.getCountryCode();
        if (countryCode != null) {
            stmt.bindString(10, countryCode);
        }
 
        String userType = entity.getUserType();
        if (userType != null) {
            stmt.bindString(11, userType);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(12, email);
        }
 
        String headBig = entity.getHeadBig();
        if (headBig != null) {
            stmt.bindString(13, headBig);
        }
 
        String liveAreaId = entity.getLiveAreaId();
        if (liveAreaId != null) {
            stmt.bindString(14, liveAreaId);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(15, sex);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(16, birthday);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // createTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // head
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // updateTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // personalizedSignature
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // countryCode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // email
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // headBig
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // liveAreaId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // sex
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // birthday
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreateTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHead(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdateTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPersonalizedSignature(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCountryCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEmail(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setHeadBig(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLiveAreaId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSex(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBirthday(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
