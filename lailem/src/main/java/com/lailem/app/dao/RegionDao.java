package com.lailem.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REGION".
*/
public class RegionDao extends AbstractDao<Region, Long> {

    public static final String TABLENAME = "REGION";

    /**
     * Properties of entity Region.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CreateTime = new Property(1, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property RId = new Property(2, String.class, "rId", false, "R_ID");
        public final static Property PId = new Property(3, String.class, "pId", false, "P_ID");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property RType = new Property(5, String.class, "rType", false, "R_TYPE");
        public final static Property Path = new Property(6, String.class, "path", false, "PATH");
        public final static Property CCode = new Property(7, String.class, "cCode", false, "C_CODE");
        public final static Property LCode = new Property(8, String.class, "lCode", false, "L_CODE");
        public final static Property VCode = new Property(9, String.class, "vCode", false, "V_CODE");
    };


    public RegionDao(DaoConfig config) {
        super(config);
    }
    
    public RegionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REGION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CREATE_TIME\" INTEGER," + // 1: createTime
                "\"R_ID\" TEXT," + // 2: rId
                "\"P_ID\" TEXT," + // 3: pId
                "\"NAME\" TEXT," + // 4: name
                "\"R_TYPE\" TEXT," + // 5: rType
                "\"PATH\" TEXT," + // 6: path
                "\"C_CODE\" TEXT," + // 7: cCode
                "\"L_CODE\" TEXT," + // 8: lCode
                "\"V_CODE\" TEXT);"); // 9: vCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REGION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Region entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(2, createTime);
        }
 
        String rId = entity.getRId();
        if (rId != null) {
            stmt.bindString(3, rId);
        }
 
        String pId = entity.getPId();
        if (pId != null) {
            stmt.bindString(4, pId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String rType = entity.getRType();
        if (rType != null) {
            stmt.bindString(6, rType);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(7, path);
        }
 
        String cCode = entity.getCCode();
        if (cCode != null) {
            stmt.bindString(8, cCode);
        }
 
        String lCode = entity.getLCode();
        if (lCode != null) {
            stmt.bindString(9, lCode);
        }
 
        String vCode = entity.getVCode();
        if (vCode != null) {
            stmt.bindString(10, vCode);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Region readEntity(Cursor cursor, int offset) {
        Region entity = new Region( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // createTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // rType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // path
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // lCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // vCode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Region entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreateTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setRId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVCode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Region entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Region entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
