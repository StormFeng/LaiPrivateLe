package com.lailem.app.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE".
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CreateTime = new Property(1, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property UserId = new Property(2, String.class, "userId", false, "USER_ID");
        public final static Property TId = new Property(3, String.class, "tId", false, "T_ID");
        public final static Property FId = new Property(4, String.class, "fId", false, "F_ID");
        public final static Property MType = new Property(5, String.class, "mType", false, "M_TYPE");
        public final static Property SType = new Property(6, String.class, "sType", false, "S_TYPE");
        public final static Property FHead = new Property(7, String.class, "fHead", false, "F_HEAD");
        public final static Property FNick = new Property(8, String.class, "fNick", false, "F_NICK");
        public final static Property MId = new Property(9, String.class, "mId", false, "M_ID");
        public final static Property Status = new Property(10, String.class, "status", false, "STATUS");
        public final static Property ConversationId = new Property(11, String.class, "conversationId", false, "CONVERSATION_ID");
        public final static Property IsRead = new Property(12, String.class, "isRead", false, "IS_READ");
        public final static Property IsReadOne = new Property(13, String.class, "isReadOne", false, "IS_READ_ONE");
        public final static Property STime = new Property(14, Long.class, "sTime", false, "S_TIME");
        public final static Property Msg = new Property(15, String.class, "msg", false, "MSG");
    };


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CREATE_TIME\" INTEGER," + // 1: createTime
                "\"USER_ID\" TEXT," + // 2: userId
                "\"T_ID\" TEXT," + // 3: tId
                "\"F_ID\" TEXT," + // 4: fId
                "\"M_TYPE\" TEXT," + // 5: mType
                "\"S_TYPE\" TEXT," + // 6: sType
                "\"F_HEAD\" TEXT," + // 7: fHead
                "\"F_NICK\" TEXT," + // 8: fNick
                "\"M_ID\" TEXT," + // 9: mId
                "\"STATUS\" TEXT," + // 10: status
                "\"CONVERSATION_ID\" TEXT," + // 11: conversationId
                "\"IS_READ\" TEXT," + // 12: isRead
                "\"IS_READ_ONE\" TEXT," + // 13: isReadOne
                "\"S_TIME\" INTEGER," + // 14: sTime
                "\"MSG\" TEXT);"); // 15: msg
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(2, createTime);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
 
        String tId = entity.getTId();
        if (tId != null) {
            stmt.bindString(4, tId);
        }
 
        String fId = entity.getFId();
        if (fId != null) {
            stmt.bindString(5, fId);
        }
 
        String mType = entity.getMType();
        if (mType != null) {
            stmt.bindString(6, mType);
        }
 
        String sType = entity.getSType();
        if (sType != null) {
            stmt.bindString(7, sType);
        }
 
        String fHead = entity.getFHead();
        if (fHead != null) {
            stmt.bindString(8, fHead);
        }
 
        String fNick = entity.getFNick();
        if (fNick != null) {
            stmt.bindString(9, fNick);
        }
 
        String mId = entity.getMId();
        if (mId != null) {
            stmt.bindString(10, mId);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(11, status);
        }
 
        String conversationId = entity.getConversationId();
        if (conversationId != null) {
            stmt.bindString(12, conversationId);
        }
 
        String isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindString(13, isRead);
        }
 
        String isReadOne = entity.getIsReadOne();
        if (isReadOne != null) {
            stmt.bindString(14, isReadOne);
        }
 
        Long sTime = entity.getSTime();
        if (sTime != null) {
            stmt.bindLong(15, sTime);
        }
 
        String msg = entity.getMsg();
        if (msg != null) {
            stmt.bindString(16, msg);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // createTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fHead
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fNick
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // mId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // status
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // conversationId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // isRead
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // isReadOne
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // sTime
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // msg
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreateTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFHead(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFNick(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStatus(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setConversationId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsRead(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsReadOne(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSTime(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setMsg(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
